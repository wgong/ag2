[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[metadata]
license_file = "LICENSE"
description-file = "README.md"

[project]
name = "pyautogen"
description = "A programming framework for agentic AI"
readme = "README.md"
authors = [
    {name = "Chi Wang & Qingyun Wu", email = "support@ag2.ai"}
]

keywords = [
    "ai",
    "agent",
    "autogen",
    "ag2",
    "pyautogen",
    "ag2.ai",
    "ag2ai",
    "agentic"
]

requires-python = ">=3.9,<3.14"

dynamic = ["version"]

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
]

dependencies = [
    "diskcache",
    "termcolor",
    "python-dotenv",
    "tiktoken",
    # Disallowing 2.6.0 can be removed when this is fixed https://github.com/pydantic/pydantic/issues/8705
    "pydantic>=2.6.1,<3",
    "docker",
    "packaging",
    "asyncer==0.0.8",
    "fast-depends>=2.4.12,<3",
    "httpx>=0.28.1,<1",
]

[project.optional-dependencies]

flaml = [
    "flaml",
    # numpy is installed by flaml, but we want to pin the version to below 2.x (see https://github.com/microsoft/autogen/issues/1960)
    "numpy>=2.1; python_version>='3.13'",  # numpy 2.1+ required for Python 3.13
    "numpy>=1.24.0,<2.0.0; python_version<'3.13'",  # numpy 1.24+ for older Python versions
]

# public distributions

openai = [
    "openai>=1.58",
]

openai-realtime = [
    "autogen[openai]",
    "openai[realtime]",
]

jupyter-executor = [
    "jupyter-kernel-gateway",
    "websocket-client",
    "requests",
    "jupyter-client>=8.6.0",
    "ipykernel>=6.29.0",
]

retrievechat = [
    "protobuf==5.29.3",
    "chromadb==0.6.3",
    "sentence_transformers",
    "pypdf",
    "ipython",
    "beautifulsoup4",
    "markdownify",
]

retrievechat-pgvector = [
    "pyautogen[retrievechat]",
    "pgvector>=0.2.5",
    "psycopg[binary]>=3.1.18; platform_system=='Windows' or platform_system=='Darwin'",
    "psycopg>=3.1.18; platform_system=='Linux'",
]

retrievechat-mongodb = [
    "pyautogen[retrievechat]",
    "pymongo>=4.0.0",
    "numpy",
]

retrievechat-qdrant = [
    "pyautogen[retrievechat]",
    "qdrant_client",
    "fastembed>=0.3.1",
]

retrievechat-couchbase = [
    "pyautogen[retrievechat]",
    "couchbase>=4.3.0",
    "numpy",
]

graph-rag-falkor-db = [
    "graphrag_sdk==0.6.1",
    "falkordb>=1.0.10",
]

rag = [
    "docling>=2.15.1,<3",
    "selenium>=4.28.1,<5",
    "webdriver-manager==4.0.2",
    "chromadb>=0.5,<1",
    "llama-index>=0.12,<1",
    "llama-index-vector-stores-chroma==0.4.1",
]


crawl4ai = [
    "crawl4ai>=0.4.247,<0.5",
]

browser-use = [
    # ToDo: Restrict browser-use to a specific version
    # browser-use>0.1.38 moved langchain-google-genai, aws, etc to its dev dependencies
    "browser-use==0.1.37",
]

neo4j = [
    "docx2txt==0.8",
    "llama-index==0.12.19",
    "llama-index-graph-stores-neo4j==0.4.6",
    "llama-index-core==0.12.19",
    "llama-index-readers-web==0.3.5",
]

# used for agentchat_realtime_swarm notebook and realtime agent twilio demo
twilio = [
    "fastapi>=0.115.0,<1",
    "uvicorn>=0.30.6,<1",
    "twilio>=9.3.2"
]

interop-crewai = [
    "crewai[tools]>=0.76,<1; python_version>='3.10' and python_version<'3.13'",
    "weaviate-client>=4,<5; python_version>='3.10' and python_version<'3.13'",
]
interop-langchain = ["langchain-community>=0.3.12,<1"]
interop-pydantic-ai = ["pydantic-ai==0.0.24"]
interop =[
    "pyautogen[interop-crewai, interop-langchain, interop-pydantic-ai]",
]

# pysqlite3-binary used so it doesn't need to compile pysqlite3
autobuild = ["chromadb", "sentence-transformers", "huggingface-hub", "pysqlite3-binary"]

blendsearch = ["flaml[blendsearch]"]
mathchat = ["sympy", "wolframalpha"]
captainagent = ["pyautogen[autobuild]", "pandas"]
teachable = ["chromadb"]
lmm = ["replicate", "pillow"]
graph = ["networkx", "matplotlib"]
gemini = [
    "google-api-core",
    "google-genai>=1.2.0,<2.0",
    "google-cloud-aiplatform",
    "google-auth",
    "pillow",
    "jsonschema",
    "jsonref>=1,<2",
]

together = ["together>=1.2"]
websurfer = ["beautifulsoup4", "markdownify", "pdfminer.six", "pathvalidate"]
redis = ["redis"]
cosmosdb = ["azure-cosmos>=4.2.0"]
websockets = ["websockets>=14.0,<15"]
long-context = ["llmlingua<0.3"]
anthropic = ["anthropic[vertex]>=0.23.1"]
cerebras = ["cerebras_cloud_sdk>=1.0.0"]
mistral = ["mistralai>=1.0.1"]
groq = ["groq>=0.9.0"]
cohere = ["cohere>=5.13.5"]
ollama = ["ollama>=0.4.5", "fix_busted_json>=0.0.18"]
bedrock = ["boto3>=1.34.149"]

commsagent-discord = ["discord.py>=2.4.0,<2.5"]
commsagent-slack = ["slack_sdk>=3.33.0,<3.40"]
commsagent-telegram = ["telethon>=1.38.1, <2"]

## dev dependencies

# test dependencies
test = [
    "ipykernel==6.29.5",
    "nbconvert==7.16.6",
    "nbformat==5.10.4",
    "pytest-cov==6.0.0",
    "pytest-asyncio==0.25.3",
    "pytest==8.3.4",
    "mock==5.1.0",
    "pandas==2.2.3",
    "fastapi==0.115.8",
]

docs = [
    "mkdocs-material==9.6.4",
    "mkdocstrings[python]==0.28.1",
    "mkdocs-literate-nav==0.6.1",
    "mdx-include==1.4.2",
    "mkdocs-git-revision-date-localized-plugin==1.3.0",
    "mike==2.1.3",
    "typer==0.15.1",
    "mkdocs-minify-plugin==0.8.0",
    "mkdocs-macros-plugin==1.3.7",  # includes with variables
    "mkdocs-glightbox==0.4.0",  # img zoom
    "pillow",  # required for mkdocs-glightbo
    "cairosvg",  # required for mkdocs-glightbo
    "pdoc3==0.11.5",
    "jinja2==3.1.5",
    "pyyaml==6.0.2",
    "termcolor==2.5.0",
    "nbclient==0.10.2",
]

types = [
    "mypy==1.15.0",
    "pyautogen[test, openai]",
]

lint = [
    "ruff==0.9.7",
    "codespell==2.4.1",
    "pyupgrade-directories==0.3.0",
]

dev = [
    "toml==0.10.2",
    "pyautogen[lint,test,types,docs]",
    "pre-commit==4.1.0",
    "detect-secrets==1.5.0",
    "uv==0.6.2",
]


[project.urls]
Homepage = "https://ag2.ai/"
Documentation = "https://docs.ag2.ai/docs/Home"
Tracker = "https://github.com/ag2ai/ag2/issues"
Source = "https://github.com/ag2ai/ag2"
Discord = "https://discord.gg/pAbnFJrkgZ"

[tool.hatch.version]
path = "autogen/version.py"

[tool.hatch.build]
skip-excluded-dirs = true
exclude = ["/test", "/notebook"]

[tool.hatch.build.targets.wheel]
packages = ["autogen"]
only-include = ["autogen", "autogen/agentchat/contrib/captainagent/tools"]

[tool.hatch.build.targets.sdist]
exclude = ["test", "notebook"]

[tool.hatch.build.targets.wheel.sources]
"autogen" = "autogen"
"autogen/agentchat/contrib/captainagent/tools" = "autogen/agentchat/contrib/captainagent/tools"


[tool.pytest.ini_options]
addopts = '--cov=autogen --cov-append --cov-branch --cov-report=xml -m "not conda"'
testpaths = [
    "test",
]
markers = [
    "conda: test related to conda forge distribution",
    "all",
    "openai",
    "gemini",
    "anthropic",
    "deepseek",
    "redis",
    "docker",
    "docs",
    # optional deps
    "jupyter_executor",
    "retrievechat",
    "retrievechat_pgvector",
    "retrievechat_mongodb",
    "retrievechat_qdrant",
    "graph_rag_falkor_db",
    "neo4j",
    "twilio",
    "interop",
    "browser_use",
    "crawl4ai",
    "websockets",
]

[tool.black]
# https://github.com/psf/black
line-length = 120
exclude = "(.eggs|.git|.hg|.mypy_cache|.venv|_build|buck-out|build|dist)"


[tool.ruff]
fix = true
line-length = 120
target-version = 'py39'
# Exclude a variety of commonly ignored directories.
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "docs",
    # This file needs to be either upgraded or removed and therefore should be
    # ignore from type checking for now
    "math_utils\\.py$",
    "setup_*.py",
]

preview = true

[tool.ruff.lint]
# Enable Pyflakes `E` and `F` codes by default.
select = [
    "E",     # pycodestyle errors     https://docs.astral.sh/ruff/rules/#error-e
    "W",     # pycodestyle warnings   https://docs.astral.sh/ruff/rules/#warning-w
    "C90",   # mccabe                 https://docs.astral.sh/ruff/rules/#mccabe-c90
    "N",     # pep8-naming            https://docs.astral.sh/ruff/rules/#pep8-naming-n
#    "D",     # pydocstyle             https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "I",     # isort                  https://docs.astral.sh/ruff/rules/#isort-i
    "F",     # pyflakes               https://docs.astral.sh/ruff/rules/#pyflakes-f
    "ASYNC", # flake8-async           https://docs.astral.sh/ruff/rules/#flake8-async-async
#    "C4",    # flake8-comprehensions  https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
#    "B",     # flake8-bugbear         https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "Q",     # flake8-quotes          https://docs.astral.sh/ruff/rules/#flake8-quotes-q
#    "T20",   # flake8-print           https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "SIM",   # flake8-simplify        https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
#    "PT",    # flake8-pytest-style    https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
#    "PTH",   # flake8-use-pathlib     https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
#    "TCH",   # flake8-type-checking   https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
#    "RUF",   # Ruff-specific rules    https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
#    "PERF",  # Perflint               https://docs.astral.sh/ruff/rules/#perflint-perf
    "RUF022", # Sort __all__           https://docs.astral.sh/ruff/rules/unsorted-dunder-all/
#    "UP",     # pyupgrade              https://docs.astral.sh/ruff/rules/#pydocstyle-d
]

ignore = ["E501", "F403", "C901",
    "E402",
    "E721",
    "ASYNC109",
    "E501",  # line too long, handled by formatter later
    "D100", "D101", "D102", "D103", "D104",
    "C901",  # too complex
]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.isort]
case-sensitive = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.mypy]
files = [
    "autogen/agentchat/contrib/rag",
    "autogen/agentchat/contrib/graph_rag",
    "autogen/agentchat/realtime_agent",
    "autogen/agents",
    "autogen/coding",
    "autogen/exception_utils.py",
    "autogen/import_utils.py",
    "autogen/interop",
    "autogen/io",
    "autogen/logger",
    "autogen/messages",
    "autogen/oai/oai_models",
    "autogen/oai/openai_utils.py",
    "autogen/tools",
    "website/*.py",
    "test/agentchat/contrib/graph_rag",
#    "test/agentchat/contrib/rag",
    "test/agentchat/realtime_agent",
    "test/agents",
    "test/conftest.py",
    "test/interop",
    "test/io",
    "test/messages",
    "test/test_import_utils.py",
    "test/test_import.py",
    "test/tools",
    "test/website",
    "test/oai/test_oai_models.py",
]

exclude = [
    "autogen/math_utils\\.py",
    "autogen/oai/completion\\.py",
    "autogen/agentchat/contrib/compressible_agent\\.py",
    "autogen/agentchat/contrib/math_user_proxy_agent.py",
    "autogen/oai/openai_utils.py",
]

strict = true
ignore_missing_imports = true
install_types = true
non_interactive = true
plugins = ["pydantic.mypy"]

# remove after all files in the repo are fixed
follow_imports = "silent"

# from https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true

warn_unused_ignores = false

disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = true

[tool.codespell]
skip = "*.js,*.map,*.pdf,*.po,*.ts,*.json,*.svg,./website/node_modules,.notebook/agentchat_microsoft_fabric.ipynb,./notebook/agentchat_swarm_graphrag_telemetry_trip_planner.ipynb,./notebook/agentchat_graph_rag_neo4j.ipynb"
quiet-level = 3
ignore-words-list = "ans,linar,nam,tread,ot,assertIn,dependin,socio-economic,ege,leapYear,fO,bu,te,ROUGE,ser,doubleClick,CNa,wOh,Hart,Empress,Chage,mane,digitalize"
